@using MovieBioApp.Data.PeopleService
@using MovieBioApp.Data.MovieService
@using MovieBioApp.Data
@using MovieBioApp.Models
@using MovieBioApp.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IMovieService MovieService;


<nav class="navbar navbar-expand-sm navbar-toggleable-sm backGroundColorNavBar border-bottom box-shadow mb-3">
    <div class="container">
        <a class="navbar-brand" href="">
            <img class="logoIcon" src="Icons/MovieIcon.png">
        </a>
        <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="navbar-nav searchBar">

                <AuthorizeView Policy="LoggedInUser">
                    <Authorized>
                        <div class="dropdown">
                            <div class="btn profileButton" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <img class="profileIcon" alt="user" src="Icons/HumanIcon.png">
                            </div>
                            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" href="UserProfile">My Profile</a>
                                <a class="dropdown-item" @onclick="ChangePageToFavourite">My Favorites</a>
                                <a class="dropdown-item" @onclick="PerformLogout">LogOut</a>

                                @*<div class="dropdown-divider"></div>
                                       <a class="dropdown-item" href="Settings">Settings</a>*@
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <a href="SignUp">SignUp</a>
                        <a href="Login">Log in</a>

                    </NotAuthorized>
                </AuthorizeView>

            </ul>
            <ul class="navbar-nav flex-grow-1 searchBar">

                <div class="dropdown">
                    <div class="btn profileButton WhiteText" type="button" id="dropdownMenuButton2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Menu<img class="profileIcon menuIcon" alt="user" src="Icons/MenuIcon.png">
                    </div>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <a class="dropdown-item" href="">Main Page</a>
                        <a class="dropdown-item" href="Top200Movies">Top 200 Movies</a>
                        <a class="dropdown-item" href="Top200Actors">Top 200 Actors</a>
                        <a class="dropdown-item" href="Top200Directors">Top 200 Directors</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" @onclick="ChangePageToSurprise">Surprise Me</a>
                    </div>
                </div>
                <li class="nav-item navSearchItem">
                    <form id="form" @onsubmit="OnChange">
                        <input type="search" id="query" name="q" placeholder="Search..." @oninput="@((arg) => ExecuteFilter(arg))">
                        @*<button>Search</button>*@
                        <button class="Button2" type="submit">@*@onclick="@OnChange"><a href="SearchPage" class="Button">Search</a>*@Search</button>
                    </form>
                </li>


            </ul>

        </div>

    </div>

</nav>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string _username;
    Random random = new Random();
    Movie _movie;

    private async Task ChangePageToFavourite()
    {
        var authState = await authenticationStateTask;
        _username= authState.User.Identity.Name; 
        NavigationManager.NavigateTo($"/FavoriteMovies/{_username}");

    }

    
    bool collapseNavMenu = true;

    string searchField = "";
    
    string baseMenuClass = "navbar-collapse d-sm-inline-flex flex-sm-row-reverse";

    string NavMenuCssClass => baseMenuClass + (collapseNavMenu ? " collapse" : "");

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    
    private void OnChange()
    {
        Console.WriteLine("Hey Wassup" + searchField);
        NavigationManager.NavigateTo($"/SearchPage/{searchField}");
    }
    
    
    
    private void ExecuteFilter(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value != null)
        {
            searchField = changeEventArgs.Value.ToString();
        }

    }
    

    private void PerformLogout()
    {
        try
        {
            ((CustomAuthentication)AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
        }
    }


    private async Task ChangePageToSurprise()
    {        
        int num = 0;
        char let;
        
        num = random.Next(0, 26);
        let = (char) ('a' + num);

        _movie = await MovieService.GetMovieByRandChar(let);

        int idToBeSet = _movie.MovieId;
        NavigationManager.NavigateTo($"/MoviePage/{idToBeSet}");

    }

}