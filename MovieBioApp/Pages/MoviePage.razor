@page "/MoviePage"
@using MovieBioApp.Data.MovieService
@using MovieBioApp.Data.OMDbAPI
@using MovieBioApp.Models

@inject IMovieService MovieService;
@inject IOMDbAPIService OmDbApiService;

<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>MovieBioApp</title>
    <base href="~/"/>
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css"/>
    <link href="css/site.css" rel="stylesheet"/>
    <link href="MovieBioApp.styles.css" rel="stylesheet"/>
    <link href="css/starSystem.css" rel="stylesheet">
</head>
<body>
<div class="container">

    @if (_movie == null || _omDbApiObj == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div class="container">
            <div class="row">
                <div class="col-sm-4">
                    <h3>
                        <strong>@_movie.MovieTitle</strong>
                    </h3>
                    <img src="@_omDbApiObj.image" alt="No image for this movie">

                </div>
                <div class="col-sm-8">

                    <h3>
                        <strong>Description</strong>
                    </h3>
                    <p>@_omDbApiObj.description</p>
                </div>

            </div>
            <div class="row">
                <div class="col-sm-12">
                    <h3>
                        <strong>Genre</strong>
                    </h3>

                    <ul>
                        @foreach (string genre in _omDbGenre)
                        {
                            <li>@genre</li>
                        }
                    </ul>
                    <h3>
                        <strong>Rating</strong>
                    </h3>
                    @if (_movie.Rating == 0)
                    {
                        if (string.IsNullOrEmpty(_omDbApiObj.ratingValue))
                        {
                            <p>No rating for this movie yet</p>
                        }
                        else
                        {
                            <p>@_omDbApiObj.ratingValue / 10</p>
                        }
                    }
                    else
                    {
                        <p>@_movie.Rating / 10</p>
                    }

                    <h3>
                        <strong>Rating based on actors</strong>
                    </h3>
                    <p>@_movie.RatingBasedOnActors / 10</p>


                    <h3>
                        <strong>Directors</strong>
                    </h3>
                    @if (_movie.Director == null)
                    {
                        <ul>
                            @foreach (string director in _omDbDirectors)
                            {
                                <li>@director</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <ul>
                            @foreach (string director in _movie.Director)
                            {
                                <li>@director</li>
                            }
                        </ul>
                    }
                    <h3>
                        <strong>Stars</strong>
                    </h3>
                    <ul>
                        @foreach (string actor in _omDbActors)
                        {
                            <li>@actor</li>
                        }
                    </ul>

                </div>
            </div>

            <div class="row">
                <h3>
                    <strong>Reviews</strong>
                </h3>
                <br/>
            </div>
            <div class="row">
                <style>#div1 { height: 300px; width:300px; overflow: scroll; background: #eeeeee}</style>

                <div class="col-sm-8" id="div1">
                    @foreach (MovieReview review in _movie.Reviews)
                    {
                        <div id="div1">
                            <p>
                                <strong>@review.ReviewUsername</strong>
                            </p>
                            <p>Description</p>
                            <p>@review.ReviewDescription</p>
                            <p>Rating</p>
                            <p>@review.ReviewRating / 10</p>
                        </div>
                    }



                </div>

                <AuthorizeView Context="AuthorizeContext">
                    <Authorized>
                        <div class="col-sm-4">
                            <h3>
                                <strong>Write your review</strong>
                            </h3>


                            <EditForm Model="@_newReview" OnValidSubmit="SaveReview">
                                <DataAnnotationsValidator/>
                                <ValidationSummary/>
                                <div class="form-group">
                                    <p>@_errorMessage</p>
                                    <textarea class="form-control" placeholder="@_savedReview.ReviewDescription" @bind="_newReview.ReviewDescription" rows="3"></textarea>


                                    <select placeholder="@_savedReview.ReviewRating" @bind="_newReview.ReviewRating">
                                        <option value="1">1</option>
                                        <option value="2">2</option>
                                        <option value="3">3</option>
                                        <option value="4">4</option>
                                        <option value="5">5</option>
                                        <option value="6">6</option>
                                        <option value="7">7</option>
                                        <option value="8">8</option>
                                        <option value="9">9</option>
                                        <option value="10">10</option>

                                    </select>
                                    <button class="btn btn-outline-dark" type="submit">Submit</button>
                                </div>
                            </EditForm>


                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="col-sm-6">
                            <h3>
                                <strong>Log in or signup to write your own review!</strong>
                            </h3>

                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>

        </div>
    }



</div>
</body>
</html>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string _username;

    string _reviewTextfield = "";
    float _reviewRating;
    string _errorMessage = "";

    MovieReview _savedReview;
    
    Movie _movie;
    MovieReview _newReview;
    OMDbAPIObj _omDbApiObj;
    List<string> _omDbActors;
    List<string> _omDbDirectors;
    List<string> _omDbGenre;

    int idToBeSet = 15414;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        _username = authState.User.Identity.Name;

        _movie = await MovieService.GetMovieById(idToBeSet);
        if (authState.User.Identity.IsAuthenticated)
        {
            _newReview = new MovieReview();
            _savedReview = _movie.Reviews.First(t => string.Equals(t.ReviewUsername, _username));

        }
        else
        {
            Console.WriteLine("The user is NOT authenticated.");
        }



        _omDbApiObj = await OmDbApiService.GetOMDbAPIMovie(_movie.MovieTitle, _movie.Year);

        if (string.IsNullOrEmpty(_omDbApiObj.actors) || string.IsNullOrEmpty(_omDbApiObj.directors) || string.IsNullOrEmpty(_omDbApiObj.genre))
        {
            _omDbActors.Add("No actors to show");
            _omDbDirectors.Add("No directors to show");
            _omDbGenre.Add("No genre to show");
        }

        _omDbActors = _omDbApiObj.actors.Split(new char[] { ',' }).ToList();
        _omDbDirectors = _omDbApiObj.directors.Split(new char[] { ',' }).ToList();
        _omDbGenre = _omDbApiObj.genre.Split(new char[] { ',' }).ToList();
    }

    private void SaveReview()
    {
        _reviewTextfield = _newReview.ReviewDescription;
        _reviewRating = _newReview.ReviewRating;

        if (string.IsNullOrEmpty(_reviewTextfield))
        {
            _errorMessage = "Please enter a valid description";
        }

        else
        {
            if (string.Equals(_savedReview.ReviewDescription,_reviewTextfield) ||  Equals(_savedReview.ReviewRating,_reviewRating))
            {
                _errorMessage = "Your review has been updated";
                MovieService.PatchMovieReview(_username, _reviewTextfield, _reviewRating, _movie.MovieId);
            }
            else if(string.Equals(_savedReview.ReviewDescription,_reviewTextfield) &&  Equals(_savedReview.ReviewRating,_reviewRating))
            {
                _errorMessage = "You have not sumbitted any change";
                MovieService.PatchMovieReview(_username, _reviewTextfield, _reviewRating, _movie.MovieId);

            }
            else
            {
                Console.WriteLine("Test3");
                _newReview.ReviewDescription = _reviewTextfield;
                _newReview.ReviewRating = _reviewRating;
                _newReview.ReviewUsername = _username;
                _newReview.MovieID = _movie.MovieId;
                MovieService.PostMovieReview(_newReview);
            }

        }
    }


}