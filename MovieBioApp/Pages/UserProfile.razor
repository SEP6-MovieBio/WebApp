@page "/UserProfile"
@using MovieBioApp.Data
@using System.Text.Json
@using MovieBioApp.Authentication
@using MovieBioApp.Data.UserService
@using MovieBioApp.Models
@inject IUserInfoService UserInfoService;
@inject NavigationManager NavigationManager

<h3>UserProfile</h3>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>MovieBioApp</title>
    <base href="~/"/>
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css"/>
    <link href="css/site.css" rel="stylesheet"/>
    <link href="MovieBioApp.styles.css" rel="stylesheet"/>
    <link href="css/starSystem.css" rel="stylesheet">
</head>
<body>

<div class="row justify-content-start p-3">
    <img src="https://foundrmeet.com/wp-content/themes/cera/assets/images/avatars/user-avatar.png" class="col-auto rounded-circle" alt="profile picture">
    <div class="col-auto">
        <h1>Bio</h1>
        @{
           
            if (_userInfo != null)
            {
                <textarea id="bioTextArea" @bind="_userInfo.Biography" rows="10" cols="30"></textarea>
            }
            else
            {
                <textarea id="bioTextArea" rows="10" cols="30"></textarea>
            }
        }
        
        <button id="bioButton" @onclick="SubmitChangebio">Update bio</button>
    </div>
    <div class="col-auto border-right-20">
        <div>
            <h1>Your Password</h1>
            <input type="text" @bind="_password" id="passwordField">
        </div>
        <div>
            <h1>Confirm password</h1>
            <p>@_message</p>
            <input type="text" @bind="_confirmPassword" id="confirmPasswordField">
        </div>
        <div class="col-auto border-bottom-20">
            <button @onclick="SubmitChangePassword" class="btn-success mr-5">Submit</button>
            <button @onclick="CancelPassword" class="btn-danger">Cancel</button>
        </div>
    </div>
</div>
<h1>Email</h1>
@{
    
    if (_userInfo != null)
    {
        if (_userInfo.EmailIsHidden)
        {
            _email = "Email is hidden";
        }
        else
        {
            _email = _userInfo.Email;
        }
    }
}
<p>@_email</p>
<h1>Phone</h1>
@{
    
    if (_userInfo != null)
    {
        if (_userInfo.PhoneIsHidden)
        {
            _phone = "Phone number is hidden";
        }
        else
        {
            _phone = _userInfo.PhoneNumber;
        }
    }
}
<p class="border-bottom-20">@_phone</p>
<div>
    <h1>Niceness ratio</h1>
    
        @if(nicenessRatio.CompareTo(-1) == 0)
        {
            <div class="stars" style="--w: 50%;"></div>
        }
        else
        {
            <div class="stars" style="--w: @nicenessRatio%;"></div>
        }
</div>

</body>

</html>
@code {
    
    UserInfo _userInfo;
    string _username;
    double nicenessRatio;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    string _message = "";
    string _email = "";
    string _phone = "";
    string _password,_confirmPassword = "";
    string _newPassword;
    string _biography = "";

    protected override async Task OnInitializedAsync()
    {
        //_username = CustomAuthentication.CachedUser.Username;
        var authState = await authenticationStateTask;
        var user = authState.User;
        
        nicenessRatio= await UserInfoService.getNicenessRatio(_username);
        
        if (user.Identity.IsAuthenticated)
        {
            _userInfo = await UserInfoService.GetUserInfoRest(user.Identity.Name);
        }
        else
        {
            Console.WriteLine("The user is NOT authenticated.");

        }

    }

    public async Task<bool> SubmitChangePassword()
    {
        if (string.Equals(_password, _confirmPassword))
        {
            _userInfo.Password = _password;
            _message = "Password successfully changed!";
            return await UserInfoService.PostPasswordHash(_userInfo);
        }
        else
        {
            _message = "Error passwords do not match";
            return false;
        }
    }
    public async Task<bool> SubmitChangebio()
    {
        
        return await UserInfoService.Postbio(JsonSerializer.Serialize(_userInfo));
    }

    public void changebio()
    {
        _userInfo.Biography = _biography;
    }

    public async Task<bool> CancelPassword()
    {
        _password = "";
        _confirmPassword = "";
        return true;
    }

}